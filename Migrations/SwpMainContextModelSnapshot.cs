// <auto-generated />
using System;
using BrainStormEra.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BrainStormEra.Migrations
{
    [DbContext(typeof(SwpMainContext))]
    partial class SwpMainContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BrainStormEra.Models.Account", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("AccountCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("account_created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("gender");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<decimal?>("PaymentPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("payment_point");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<string>("UserAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("user_address");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_email");

                    b.Property<string>("UserPicture")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("user_picture");

                    b.Property<int?>("UserRole")
                        .HasColumnType("int")
                        .HasColumnName("user_role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("PK__account__B9BE370FC339DD57");

                    b.HasIndex("UserRole");

                    b.HasIndex(new[] { "UserEmail" }, "UQ__account__B0FBA212B4233AAB")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "UQ__account__F3DBC572B907856D")
                        .IsUnique();

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("BrainStormEra.Models.Achievement", b =>
                {
                    b.Property<string>("AchievementId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("achievement_id");

                    b.Property<DateTime>("AchievementCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("achievement_created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("AchievementDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("achievement_description");

                    b.Property<string>("AchievementIcon")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("achievement_icon");

                    b.Property<string>("AchievementName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("achievement_name");

                    b.HasKey("AchievementId")
                        .HasName("PK__achievem__3C492E839079A79E");

                    b.ToTable("achievement", (string)null);
                });

            modelBuilder.Entity("BrainStormEra.Models.Chapter", b =>
                {
                    b.Property<string>("ChapterId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("chapter_id");

                    b.Property<DateTime>("ChapterCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("chapter_created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ChapterDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("chapter_description");

                    b.Property<string>("ChapterName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("chapter_name");

                    b.Property<int?>("ChapterOrder")
                        .HasColumnType("int")
                        .HasColumnName("chapter_order");

                    b.Property<int?>("ChapterStatus")
                        .HasColumnType("int")
                        .HasColumnName("chapter_status");

                    b.Property<string>("CourseId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("course_id");

                    b.HasKey("ChapterId")
                        .HasName("PK__chapter__745EFE87FE7B2D3A");

                    b.HasIndex("ChapterStatus");

                    b.HasIndex(new[] { "CourseId", "ChapterOrder" }, "unique_chapter_order_per_course")
                        .IsUnique()
                        .HasFilter("[course_id] IS NOT NULL AND [chapter_order] IS NOT NULL");

                    b.ToTable("chapter", (string)null);
                });

            modelBuilder.Entity("BrainStormEra.Models.ChatbotConversation", b =>
                {
                    b.Property<string>("ConversationId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("conversation_id");

                    b.Property<string>("ConversationContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("conversation_content");

                    b.Property<DateTime>("ConversationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("conversation_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("ConversationId")
                        .HasName("PK__chatbot___311E7E9A786337B4");

                    b.HasIndex("UserId");

                    b.ToTable("chatbot_conversation", (string)null);
                });

            modelBuilder.Entity("BrainStormEra.Models.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CourseCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("course_created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CourseDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("course_description");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("course_name");

                    b.Property<string>("CoursePicture")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("course_picture");

                    b.Property<int?>("CourseStatus")
                        .HasColumnType("int")
                        .HasColumnName("course_status");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.HasKey("CourseId")
                        .HasName("PK__course__8F1EF7AE501E9846");

                    b.HasIndex("CourseStatus");

                    b.HasIndex("CreatedBy");

                    b.ToTable("course", (string)null);
                });

            modelBuilder.Entity("BrainStormEra.Models.CourseCategory", b =>
                {
                    b.Property<string>("CourseCategoryId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("course_category_id");

                    b.Property<string>("CourseCategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("course_category_name");

                    b.HasKey("CourseCategoryId")
                        .HasName("PK__course_c__FE7D58E869A5A9CB");

                    b.ToTable("course_category", (string)null);
                });

            modelBuilder.Entity("BrainStormEra.Models.Enrollment", b =>
                {
                    b.Property<string>("EnrollmentId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("enrollment_id");

                    b.Property<bool?>("Approved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("approved");

                    b.Property<DateOnly?>("CertificateIssuedDate")
                        .HasColumnType("date")
                        .HasColumnName("certificate_issued_date");

                    b.Property<string>("CourseId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("EnrollmentCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("enrollment_created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("EnrollmentStatus")
                        .HasColumnType("int")
                        .HasColumnName("enrollment_status");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("EnrollmentId")
                        .HasName("PK__enrollme__6D24AA7AF40D0BE8");

                    b.HasIndex("CourseId");

                    b.HasIndex("EnrollmentStatus");

                    b.HasIndex("UserId");

                    b.ToTable("enrollment", (string)null);
                });

            modelBuilder.Entity("BrainStormEra.Models.Feedback", b =>
                {
                    b.Property<string>("FeedbackId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("feedback_id");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<string>("CourseId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("FeedbackCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("feedback_created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly>("FeedbackDate")
                        .HasColumnType("date")
                        .HasColumnName("feedback_date");

                    b.Property<bool?>("HiddenStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("hidden_status");

                    b.Property<byte?>("StarRating")
                        .HasColumnType("tinyint")
                        .HasColumnName("star_rating");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("FeedbackId")
                        .HasName("PK__feedback__7A6B2B8CCEB7225D");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("feedback", (string)null);
                });

            modelBuilder.Entity("BrainStormEra.Models.Lesson", b =>
                {
                    b.Property<string>("LessonId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("lesson_id");

                    b.Property<string>("ChapterId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("chapter_id");

                    b.Property<string>("LessonContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("lesson_content");

                    b.Property<DateTime>("LessonCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("lesson_created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LessonDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("lesson_description");

                    b.Property<string>("LessonName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("lesson_name");

                    b.Property<int>("LessonOrder")
                        .HasColumnType("int")
                        .HasColumnName("lesson_order");

                    b.Property<int?>("LessonStatus")
                        .HasColumnType("int")
                        .HasColumnName("lesson_status");

                    b.Property<int?>("LessonTypeId")
                        .HasColumnType("int")
                        .HasColumnName("lesson_type_id");

                    b.HasKey("LessonId")
                        .HasName("PK__lesson__6421F7BE17A74C7B");

                    b.HasIndex("LessonStatus");

                    b.HasIndex("LessonTypeId");

                    b.HasIndex(new[] { "ChapterId", "LessonOrder" }, "unique_lesson_order_per_chapter")
                        .IsUnique()
                        .HasFilter("[chapter_id] IS NOT NULL");

                    b.ToTable("lesson", (string)null);
                });

            modelBuilder.Entity("BrainStormEra.Models.LessonCompletion", b =>
                {
                    b.Property<string>("CompletionId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("completion_id");

                    b.Property<DateTime>("CompletionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("completion_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LessonId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("lesson_id");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("CompletionId")
                        .HasName("PK__lesson_c__FE426E9843DB08EC");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("lesson_completion", (string)null);
                });

            modelBuilder.Entity("BrainStormEra.Models.LessonType", b =>
                {
                    b.Property<int>("LessonTypeId")
                        .HasColumnType("int")
                        .HasColumnName("lesson_type_id");

                    b.Property<string>("LessonTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("lesson_type_name");

                    b.HasKey("LessonTypeId")
                        .HasName("PK__lesson_t__F5960D1E4342B14D");

                    b.ToTable("lesson_type", (string)null);
                });

            modelBuilder.Entity("BrainStormEra.Models.Notification", b =>
                {
                    b.Property<string>("NotificationId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("notification_id");

                    b.Property<string>("CourseId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("course_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("NotificationContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notification_content");

                    b.Property<DateTime>("NotificationCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("notification_created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("NotificationTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("notification_title");

                    b.Property<string>("NotificationType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("notification_type");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("NotificationId")
                        .HasName("PK__notifica__E059842F66E8F682");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("notification", (string)null);
                });

            modelBuilder.Entity("BrainStormEra.Models.Payment", b =>
                {
                    b.Property<string>("PaymentId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("payment_id");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("payment_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PaymentDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("payment_description");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("payment_status");

                    b.Property<int?>("PointsEarned")
                        .HasColumnType("int")
                        .HasColumnName("points_earned");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("PaymentId")
                        .HasName("PK__payment__ED1FC9EA3AEE907F");

                    b.HasIndex("UserId");

                    b.ToTable("payment", (string)null);
                });

            modelBuilder.Entity("BrainStormEra.Models.Role", b =>
                {
                    b.Property<int>("UserRole")
                        .HasColumnType("int")
                        .HasColumnName("user_role");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("role_name");

                    b.HasKey("UserRole")
                        .HasName("PK__role__68057FECA74D198B");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("BrainStormEra.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<string>("StatusDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("status_description");

                    b.HasKey("StatusId")
                        .HasName("PK__status__3683B5315977C7C3");

                    b.ToTable("status", (string)null);
                });

            modelBuilder.Entity("BrainStormEra.Models.UserAchievement", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.Property<string>("AchievementId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("achievement_id");

                    b.Property<string>("EnrollmentId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("enrollment_id");

                    b.Property<DateOnly>("ReceivedDate")
                        .HasColumnType("date")
                        .HasColumnName("received_date");

                    b.HasKey("UserId", "AchievementId")
                        .HasName("PK__user_ach__9A7AA5E7DB845F37");

                    b.HasIndex("AchievementId");

                    b.HasIndex("EnrollmentId");

                    b.ToTable("user_achievement", (string)null);
                });

            modelBuilder.Entity("CourseCategoryMapping", b =>
                {
                    b.Property<string>("CourseId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("course_id");

                    b.Property<string>("CourseCategoryId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("course_category_id");

                    b.HasKey("CourseId", "CourseCategoryId")
                        .HasName("PK__course_c__10F92220DD4A169A");

                    b.HasIndex("CourseCategoryId");

                    b.ToTable("course_category_mapping", (string)null);
                });

            modelBuilder.Entity("BrainStormEra.Models.Account", b =>
                {
                    b.HasOne("BrainStormEra.Models.Role", "UserRoleNavigation")
                        .WithMany("Accounts")
                        .HasForeignKey("UserRole")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__account__user_ro__3E52440B");

                    b.Navigation("UserRoleNavigation");
                });

            modelBuilder.Entity("BrainStormEra.Models.Chapter", b =>
                {
                    b.HasOne("BrainStormEra.Models.Status", "ChapterStatusNavigation")
                        .WithMany("Chapters")
                        .HasForeignKey("ChapterStatus")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__chapter__chapter__5812160E");

                    b.HasOne("BrainStormEra.Models.Course", "Course")
                        .WithMany("Chapters")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__chapter__course___571DF1D5");

                    b.Navigation("ChapterStatusNavigation");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("BrainStormEra.Models.ChatbotConversation", b =>
                {
                    b.HasOne("BrainStormEra.Models.Account", "User")
                        .WithMany("ChatbotConversations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__chatbot_c__user___6477ECF3");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainStormEra.Models.Course", b =>
                {
                    b.HasOne("BrainStormEra.Models.Status", "CourseStatusNavigation")
                        .WithMany("Courses")
                        .HasForeignKey("CourseStatus")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__course__course_s__44FF419A");

                    b.HasOne("BrainStormEra.Models.Account", "CreatedByNavigation")
                        .WithMany("Courses")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__course__created___45F365D3");

                    b.Navigation("CourseStatusNavigation");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("BrainStormEra.Models.Enrollment", b =>
                {
                    b.HasOne("BrainStormEra.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__enrollmen__cours__5165187F");

                    b.HasOne("BrainStormEra.Models.Status", "EnrollmentStatusNavigation")
                        .WithMany("Enrollments")
                        .HasForeignKey("EnrollmentStatus")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__enrollmen__enrol__52593CB8");

                    b.HasOne("BrainStormEra.Models.Account", "User")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__enrollmen__user___5070F446");

                    b.Navigation("Course");

                    b.Navigation("EnrollmentStatusNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainStormEra.Models.Feedback", b =>
                {
                    b.HasOne("BrainStormEra.Models.Course", "Course")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__feedback__course__6A30C649");

                    b.HasOne("BrainStormEra.Models.Account", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__feedback__user_i__6B24EA82");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainStormEra.Models.Lesson", b =>
                {
                    b.HasOne("BrainStormEra.Models.Chapter", "Chapter")
                        .WithMany("Lessons")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__lesson__chapter___5EBF139D");

                    b.HasOne("BrainStormEra.Models.Status", "LessonStatusNavigation")
                        .WithMany("Lessons")
                        .HasForeignKey("LessonStatus")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__lesson__lesson_s__60A75C0F");

                    b.HasOne("BrainStormEra.Models.LessonType", "LessonType")
                        .WithMany("Lessons")
                        .HasForeignKey("LessonTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__lesson__lesson_t__5FB337D6");

                    b.Navigation("Chapter");

                    b.Navigation("LessonStatusNavigation");

                    b.Navigation("LessonType");
                });

            modelBuilder.Entity("BrainStormEra.Models.LessonCompletion", b =>
                {
                    b.HasOne("BrainStormEra.Models.Lesson", "Lesson")
                        .WithMany("LessonCompletions")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__lesson_co__lesso__02FC7413");

                    b.HasOne("BrainStormEra.Models.Account", "User")
                        .WithMany("LessonCompletions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__lesson_co__user___02084FDA");

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainStormEra.Models.Notification", b =>
                {
                    b.HasOne("BrainStormEra.Models.Course", "Course")
                        .WithMany("Notifications")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__notificat__cours__787EE5A0");

                    b.HasOne("BrainStormEra.Models.Account", "CreatedByNavigation")
                        .WithMany("NotificationCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__notificat__creat__797309D9");

                    b.HasOne("BrainStormEra.Models.Account", "User")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__notificat__user___778AC167");

                    b.Navigation("Course");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainStormEra.Models.Payment", b =>
                {
                    b.HasOne("BrainStormEra.Models.Account", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__payment__user_id__7E37BEF6");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainStormEra.Models.UserAchievement", b =>
                {
                    b.HasOne("BrainStormEra.Models.Achievement", "Achievement")
                        .WithMany("UserAchievements")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__user_achi__achie__71D1E811");

                    b.HasOne("BrainStormEra.Models.Enrollment", "Enrollment")
                        .WithMany("UserAchievements")
                        .HasForeignKey("EnrollmentId")
                        .HasConstraintName("FK__user_achi__enrol__72C60C4A");

                    b.HasOne("BrainStormEra.Models.Account", "User")
                        .WithMany("UserAchievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__user_achi__user___70DDC3D8");

                    b.Navigation("Achievement");

                    b.Navigation("Enrollment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CourseCategoryMapping", b =>
                {
                    b.HasOne("BrainStormEra.Models.CourseCategory", null)
                        .WithMany()
                        .HasForeignKey("CourseCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__course_ca__cours__4BAC3F29");

                    b.HasOne("BrainStormEra.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__course_ca__cours__4AB81AF0");
                });

            modelBuilder.Entity("BrainStormEra.Models.Account", b =>
                {
                    b.Navigation("ChatbotConversations");

                    b.Navigation("Courses");

                    b.Navigation("Enrollments");

                    b.Navigation("Feedbacks");

                    b.Navigation("LessonCompletions");

                    b.Navigation("NotificationCreatedByNavigations");

                    b.Navigation("NotificationUsers");

                    b.Navigation("Payments");

                    b.Navigation("UserAchievements");
                });

            modelBuilder.Entity("BrainStormEra.Models.Achievement", b =>
                {
                    b.Navigation("UserAchievements");
                });

            modelBuilder.Entity("BrainStormEra.Models.Chapter", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("BrainStormEra.Models.Course", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Enrollments");

                    b.Navigation("Feedbacks");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("BrainStormEra.Models.Enrollment", b =>
                {
                    b.Navigation("UserAchievements");
                });

            modelBuilder.Entity("BrainStormEra.Models.Lesson", b =>
                {
                    b.Navigation("LessonCompletions");
                });

            modelBuilder.Entity("BrainStormEra.Models.LessonType", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("BrainStormEra.Models.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("BrainStormEra.Models.Status", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Courses");

                    b.Navigation("Enrollments");

                    b.Navigation("Lessons");
                });
#pragma warning restore 612, 618
        }
    }
}
