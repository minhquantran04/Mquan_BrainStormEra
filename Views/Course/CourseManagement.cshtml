@model List<BrainStormEra.Views.Course.ManagementCourseViewModel>
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Course Management</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">

    <link rel="stylesheet" href="~/css/base.css">
    <link rel="stylesheet" href="~/css/HomePage/landing_page.css">
    <link rel="stylesheet" href="~/css/Course/CourseManagement.css">

    <link rel="stylesheet" href="~/css/HomePage/homePage.css">
    <link rel="icon" href="~/lib/img/BrainStormEra_logo.png" type="image/x-icon">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-wEmeIV1mKuiNp12S5ZgFv3qdn7mQbso5mZlDR5A8P75jph8qf7ST8f7nU5V0WLFp" crossorigin="anonymous"
        defer></script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm" crossorigin="anonymous"
        defer></script>
</head>

<body class="delete-course">

    @{
        string userRole = Context.Request.Cookies["user_role"];
    }

    @if (userRole == "2")
    {
        @await Html.PartialAsync("~/Views/Shared/Instructor/Header/_Header.cshtml")
    }
    else if (userRole == "1")
    {
        @await Html.PartialAsync("~/Views/Shared/Admin/Header/_Header.cshtml")

    }
    else if (userRole == "3")
    {
        @await Html.PartialAsync("~/Views/Shared/Learner/Header/_Header.cshtml")

    }
    else
    {
        <header class="container-fluid sticky-header">
            <nav class="navbar navbar-expand-lg">
                <div class="container-fluid">
                    <a class="navbar-brand" href="@Url.Action("Index", "Home")">
                        <img src="~/lib/img/BrainStormEra_logo.png" alt="Logo" class="logo_img">
                    </a>
                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                        aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="collapse navbar-collapse" id="navbarNav">
                        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                            <li class="nav-item">
                                <a class="nav-link" href="@Url.Action("Index", "Home")">DASHBOARD</a>
                            </li>
                            <li class="nav-item"><a class="nav-link" href="#">COURSE</a></li>
                        </ul>
                        <div class="profile d-flex align-items-center">
                            <a href="@Url.Action("LoginPage", "Login" )" class="btn_login">Log In</a>
                        </div>
                    </div>
                </div>
            </nav>
        </header>
    }


    <!-- Banner Section -->
    <div class="banner mb-3">
        <div class="container">
            <img class="img-fluid img-welcomeheader" src="~/lib/img/WelcomeHeader.png" alt="Banner Image">
        </div>
    </div>

    <div class="container">
        <!-- Filters Section -->
        <div class="filters mb-3">
            <!-- Filter Categories -->
            <div class="categories d-flex justify-content-start align-items-center p-2 rounded"
                style="white-space: nowrap;">
                <button class="btn filter-btn me-2"
                    onclick="window.location.href='@Url.Action("CourseManagement", "Course")'">
                    All courses
                </button>
                @if (ViewBag.Categories is List<BrainStormEra.Models.CourseCategory> categories)
                {
                    @foreach (var category in categories)
                    {
                        <button class="btn filter-btn me-2" onclick="filterCoursesByCategory('@category.CourseCategoryId')">
                            @category.CourseCategoryName
                            <span class="badge-top ms-1">
                                (@(ViewBag.CategoryCounts != null &&
                                   ViewBag.CategoryCounts.ContainsKey(category.CourseCategoryId)
                                   ? ViewBag.CategoryCounts[category.CourseCategoryId]
                                   : 0))
                            </span>
                        </button>
                    }
                }
            </div>

            <!-- Search Bar -->
            <div class="search-bar mt-2 d-flex justify-content-center">
                <input id="searchQuery" class="form-control search-input" placeholder="Search..." type="text"
                    onkeyup="filterCourses()" />
            </div>

            @if (userRole == "2")
            {
                <a href="@Url.Action("AddCourse", "Course")" class="btn btn-success add-course-btn">Add Course</a>
            }
        </div>

        <div id="no-results" class="text-center text-muted my-3" style="display: none; height : 360px;">
            No courses found for your search keyword.
        </div>

        <div class="courses row">

            @foreach (var c in Model)
            {
                Context.Response.Cookies.Append("CourseId", c.CourseId);

                <div class="course-card col-12 col-md-6 col-lg-3 mb-4" data-course-name="@c.CourseName.ToLower()">

                    <div class="card h-100 ">
                        <a href="javascript:void(0);" onclick="viewDetailCourse('@c.CourseId')">
                            <img class="card-img-top" src="@c.CoursePicture" alt="Course Image">
                            <div class="card-body">
                                <h5 class="card-title">@c.CourseName</h5>
                                <p class="card-text text-muted"> @c.Price ₫</p>
                                <p class="card-text text-muted">Created by @c.CreatedBy</p>
                                <div>
                                    <i class="fas fa-tags me-2"></i> Categories:
                                    @foreach (var category in c.CourseCategories)
                                    {
                                        <span class="badge bg-primary me-1">@category.CourseCategoryName</span>
                                    }
                                </div>
                                <div class="rating">
                                    <span class="stars" data-rating="@c.StarRating"></span>
                                </div>
                            </div>
                        </a>


                        @if (userRole == "2")
                        {
                            <div class="card-footer d-flex justify-content-between align-items-center">
                                @if (@c.CourseStatus == 1)
                                {
                                    <span class="text-warning fw-bold px-3 py-2"
                                        style="font-size: 1.1rem; background-color: rgba(255, 255, 0, 0.2); border-radius: 5px;">Pending</span>
                                }
                                else if (@c.CourseStatus == 2)
                                {
                                    <span class="text-success fw-bold px-3 py-2"
                                        style="font-size: 1.1rem; background-color: rgba(0, 128, 0, 0.2); border-radius: 5px;">Approved</span>
                                }
                                else if (@c.CourseStatus == 0)
                                {
                                    <span class="text-danger fw-bold px-3 py-2"
                                        style="font-size: 1.1rem; background-color: rgba(255, 0, 0, 0.2); border-radius: 5px;">Reject</span>
                                }
                                else
                                {
                                    <span class="text-dark fw-bold px-3 py-2"
                                        style="font-size: 1.1rem; background-color: rgba(0, 0, 0, 0.2); border-radius: 5px;">Inactive</span>

                                }
                                <button class="btn btn-outline-primary edit btn-sm course-action" data-action="edit"
                                    data-courseid="@c.CourseId">
                                    <i class="fas fa-edit"></i> Edit
                                </button> <!-- Nút "Edit" ở bên phải -->
                            </div>

                        }
                    </div>

                </div>
            }
        </div>
    </div>
    @await Html.PartialAsync("~/Views/Shared/Footer/_Footer.cshtml")

    <script>


        function viewDetailCourse(courseId) {
            // Lưu courseId vào cookie
            document.cookie = "CourseId=" + courseId + "; path=/";

            // Chuyển hướng đến trang chi tiết khóa học
            window.location.href = "@Url.Action("CourseDetail", "Course")";  // Cập nhật đường dẫn đến CourseDetail
        }

        document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('.course-action').forEach(button => {
                button.addEventListener('click', function (event) {
                    event.stopPropagation();
                    event.preventDefault();

                    const action = this.getAttribute('data-action');
                    const courseId = this.getAttribute('data-courseid');

                    if (action === 'edit') {
                        setCookie('CourseId', courseId);
                        window.location.href = "@Url.Action("EditCourse", "Course")";
                    } else if (action === 'delete') {
                        const isConfirmed = confirm("Are you sure you want to delete this course?");
                        if (isConfirmed) {
                            setCookie('CourseId', courseId);
                            window.location.href = "/Course/ConfirmDelete";
                        }
                    }
                });
            });
        });

        function setCookie(name, value) {
            document.cookie = `${name}=${value}; path=/`;
        }



        function filterCoursesByCategory(categoryId = '') {
            // Lưu categoryId vào cookie
            document.cookie = "CategoryId=" + categoryId + "; path=/";

            // Kiểm tra nếu categoryId là rỗng, thì sẽ xem tất cả các khóa học
            location.href = '@Url.Action("FilterCoursesByCategory", "Course")';

        }
        document.addEventListener("DOMContentLoaded", function () {
            const filterBtns = document.querySelectorAll('.filter-btn');
            const allCoursesButton = document.getElementById("allCoursesButton");

            // Helper function to get cookie value
            function getCookie(name) {
                const value = `; ${document.cookie}`;
                const parts = value.split(`; ${name}=`);
                if (parts.length === 2) return parts.pop().split(';').shift();
            }

            // Set "All courses" active by default if no category is stored
            const currentCategory = getCookie("CategoryId");

            if (!currentCategory || currentCategory === "") {
                allCoursesButton.classList.add("active");
            }

            // Event listeners for each button
            filterBtns.forEach(button => {
                button.addEventListener("click", function () {
                    // Remove active from all buttons
                    filterBtns.forEach(btn => btn.classList.remove("active"));
                    // Set the clicked button as active
                    this.classList.add("active");

                    // Update the cookie
                    const categoryId = this.getAttribute('onclick')?.match(/'([^']+)'/)?.[1] || '';
                    document.cookie = "CategoryId=" + categoryId + "; path=/";

                    // Save the scroll position
                    localStorage.setItem("scrollPosition", window.scrollY);
                });
            });

            // Reset scroll position after reload
            const savedScrollPosition = localStorage.getItem("scrollPosition");
            if (savedScrollPosition) {
                window.scrollTo(0, parseInt(savedScrollPosition));
                localStorage.removeItem("scrollPosition");
            }
        });


        function filterCourses() {
            const searchQuery = document.getElementById('searchQuery').value.toLowerCase();
            const courses = document.querySelectorAll('.course-card');
            let hasVisibleCourse = false;

            courses.forEach(course => {
                const courseName = course.getAttribute('data-course-name');
                if (courseName.includes(searchQuery)) {
                    course.style.display = 'block';
                    hasVisibleCourse = true;
                } else {
                    course.style.display = 'none';
                }
            });


            const noResults = document.getElementById('no-results');
            noResults.style.display = hasVisibleCourse ? 'none' : 'block';
        }

        document.addEventListener("DOMContentLoaded", function () {
            // Restore scroll position if it exists in localStorage
            const savedScrollPosition = localStorage.getItem("scrollPosition");
            if (savedScrollPosition) {
                window.scrollTo(0, parseInt(savedScrollPosition));
                localStorage.removeItem("scrollPosition"); // Remove it after restoring to prevent unintended behavior on other pages
            }

            // Save scroll position when any filter button is clicked
            const filterBtns = document.querySelectorAll('.filter-btn');
            filterBtns.forEach(button => {
                button.addEventListener('click', function () {
                    filterBtns.forEach(btn => btn.classList.remove('active')); // Remove 'active' from all buttons
                    this.classList.add('active'); // Add 'active' to the current button

                    // Save the scroll position to localStorage
                    localStorage.setItem("scrollPosition", window.scrollY);
                });
            });
        });
        document.addEventListener("DOMContentLoaded", function () {
            // Get the current category ID from the URL or cookie
            const urlParams = new URLSearchParams(window.location.search);
            const currentCategory = getCookie("CategoryId");

            const filterBtns = document.querySelectorAll('.filter-btn');

            filterBtns.forEach(button => {
                // Check if this button corresponds to the current category
                const buttonCategory = button.getAttribute('onclick')?.match(/'([^']+)'/)?.[1];

                if (
                    (currentCategory && buttonCategory === currentCategory) ||
                    (!currentCategory && button.textContent.trim() === 'All courses')
                ) {
                    button.classList.add('active');
                }

                button.addEventListener('click', function () {
                    filterBtns.forEach(btn => btn.classList.remove('active'));
                    this.classList.add('active');
                    localStorage.setItem("scrollPosition", window.scrollY);
                });
            });
        });

        // Helper function to get cookie value
        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
        }
    </script>
    <script src="~/js/Course/DeleteCourse.js"></script>

</body>

</html>