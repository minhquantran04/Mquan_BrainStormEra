@model BrainStormEra.Views.Course.EditCourseViewModel

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Course</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">

    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/Course/EditCourse.css">
    <link rel="stylesheet" href="~/css/HomePage/landing_page.css">
    <link rel="stylesheet" href="~/css/base.css">
    <link rel="icon" href="~/lib/img/BrainStormEra_logo.png" type="image/x-icon">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm"
        crossorigin="anonymous"></script>
</head>

<body class="Edit-course-page">
    @await Html.PartialAsync("~/Views/Shared/Instructor/Header/_Header.cshtml")
    @await Html.PartialAsync("~/Views/Shared/Chatbot/Chatbot.cshtml")

    <div class="container-fluid">
        <div class="row">

            <!-- Offcanvas Sidebar for smaller screens -->
            <div class="offcanvas offcanvas-start" tabindex="-1" id="offcanvasSidebar"
                aria-labelledby="offcanvasSidebarLabel">
                <div class="offcanvas-header">
                    <h5 class="offcanvas-title" id="offcanvasSidebarLabel">Menu</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                </div>
                <div class="offcanvas-body">
                    <div class="nav flex-column">
                        <a href="#" class="nav-link text-secondary fw-bold mb-2">Edit Course</a>
                        <a href="#" class="nav-link text-secondary">Home</a>
                    </div>
                </div>
            </div>

            <!-- Sidebar for larger screens -->
            <nav class="col-md-2 d-none d-md-block sidebar py-2">
                <div class="nav flex-column return-btn">
                    <a href="@Url.Action("CourseManagement", "Course")"
                        class="nav-link text-secondary fw-bold mb-2">Return</a>
                </div>
            </nav>

            <main class="col-md-9">
                @{

                    string courseId = Context.Request.Cookies["CourseId"];

                    <div class="d-flex justify-content-between align-items-center mt-3">
                        <h2 class="main-header mt-3">Edit COURSE</h2>
                        <a href="@Url.Action("ChapterManagement", "Chapter")" class="btn" id="add-chapter-button">
                            <i class="fas fa-plus"></i> Add Chapter
                        </a>
                    </div>

                }
                <div class="card mb-4">
                    <div class="card-header">
                        Basic Info
                    </div>
                    <div class="card-body">
                        <!-- Start form -->
                        <form method="post" enctype="multipart/form-data">


                            <input type="hidden" asp-for="CourseId" />


                            <div class="mb-3">
                                <label for="courseName" class="form-label">Name course</label>
                                <input asp-for="CourseName" type="text" class="form-control" id="courseName"
                                    placeholder="Edit name course">
                                <span asp-validation-for="CourseName" class="text-danger"></span>

                            </div>

                            <div class="mb-3">
                                <label for="categoryInput" class="form-label">Category</label>
                                <input type="text" id="categoryInput" placeholder="Select Categories"
                                    class="form-control">
                                <div class="text-danger" id="categoryError" style="display: none;">Please select a valid
                                    category.</div>
                                <ul id="categorySuggestions" class="list-group position-absolute"
                                    style="max-height: 150px; overflow-y: auto; display: none;">
                                    @foreach (var category in Model.CourseCategories)
                                    {
                                        <li class="list-group-item list-group-item-action"
                                            data-id="@category.CourseCategoryId">
                                            @category.CourseCategoryName
                                        </li>
                                    }
                                </ul>
                                <ul id="selectedCategories" class="mt-2">
                                    @foreach (var selectedCategory in Model.SelectedCategories)
                                    {
                                        <li class="list-group-item">
                                            @selectedCategory.CourseCategoryName
                                            <input type="hidden" name="CategoryIds"
                                                value="@selectedCategory.CourseCategoryId">
                                            <button type="button" class="btn-close ms-2" aria-label="Remove"></button>
                                        </li>
                                    }
                                </ul>
                            </div>

                            <div class="mb-3">
                                <label for="coursePrice" class="form-label">Price:</label>
                                <input asp-for="Price" type="number" class="form-control" id="coursePrice"
                                    placeholder="Enter course price" min="0">
                                <span asp-validation-for="Price" class="text-danger"></span>

                            </div>


                            <div class="mb-3">
                                <label for="courseDescription" class="form-label">Description</label>
                                <textarea asp-for="CourseDescription" class="form-control" id="courseDescription"
                                    rows="5"></textarea>
                                <span asp-validation-for="CourseDescription" class="text-danger"></span>
                            </div>


                            <!-- Photo Upload Section -->
                            <div class="card mb-4">
                                <div class="card-header">
                                    Photo
                                </div>
                                <div class="card-body d-flex justify-content-center">
                                    <div class="mb-3 d-flex flex-column align-items-center">
                                        <img id="previewImage" src="@Model.CoursePictureFile" for-asp="CoursePicture"
                                            alt="Edit Photo" class="img-fluid mb-2">
                                        <span class="fw-bold text-primary">Edit Photo</span>
                                        <input asp-for="CoursePicture" class="form-control mt-2" type="file"
                                            id="formFile" accept="image/*">
                                        <span asp-validation-for="CoursePicture" class="text-danger"></span>

                                    </div>
                                </div>
                            </div>

                            <!-- Submit Button -->
                            <div class="text-center mt-4">
                                <button type="submit" class="btn btn-success">Update</button>
                            </div>
                        </form>
                    </div>
                </div>

            </main>
        </div>
    </div>


    @await Html.PartialAsync("~/Views/Shared/Footer/_Footer.cshtml")

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8QySsHqKWu"
        crossorigin="anonymous"></script>
    <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <script src="~/js/Course/EditCourse.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const selectedCategories = Array.from(document.querySelectorAll('input[name="CategoryIds"]')).map(input => input.value);
            const selectedCategoriesList = document.getElementById('selectedCategories');
            const categoryInput = document.getElementById('categoryInput');
            const categorySuggestions = document.getElementById('categorySuggestions');
            const categoryError = document.getElementById('categoryError');
            const form = document.querySelector('form');

            // Xử lý khi người dùng nhập để gợi ý danh mục
            categoryInput.addEventListener('input', () => {
                const inputValue = categoryInput.value.toLowerCase();
                let hasSuggestions = false;

                Array.from(categorySuggestions.children).forEach(option => {
                    if (option.textContent.toLowerCase().includes(inputValue) && inputValue.length > 0) {
                        option.style.display = 'block';
                        hasSuggestions = true;
                    } else {
                        option.style.display = 'none';
                    }
                });

                categorySuggestions.style.display = hasSuggestions ? 'block' : 'none';
            });

            // Xử lý chọn gợi ý
            categorySuggestions.addEventListener('click', (event) => {
                const selectedOption = event.target;
                const categoryId = selectedOption.getAttribute('data-id');
                const categoryName = selectedOption.textContent;

                if (!selectedCategories.includes(categoryId)) {
                    selectedCategories.push(categoryId);
                    categoryError.style.display = 'none';

                    const li = document.createElement('li');
                    li.classList.add("list-group-item");
                    li.innerHTML = `${categoryName}
                            <input type="hidden" name="CategoryIds" value="${categoryId}">
                            <button type="button" class="btn-close ms-2" aria-label="Remove"></button>`;
                    selectedCategoriesList.appendChild(li);

                    // Thêm sự kiện xóa cho nút close
                    li.querySelector(".btn-close").addEventListener('click', () => removeCategory(li, categoryId));
                    categoryInput.value = '';
                    categorySuggestions.style.display = 'none';
                }
            });

            // Kiểm tra khi gửi form
            form.addEventListener('submit', (event) => {
                if (selectedCategories.length === 0) {
                    event.preventDefault();
                    categoryError.style.display = 'block';
                    categoryError.textContent = 'Please select at least one category.';
                }
            });

            // Thêm sự kiện xóa cho tất cả các nút xóa của danh mục đã có sẵn khi trang tải
            document.querySelectorAll('#selectedCategories .btn-close').forEach(button => {
                button.addEventListener('click', () => {
                    const li = button.parentElement;
                    const categoryId = li.querySelector('input[name="CategoryIds"]').value;
                    removeCategory(li, categoryId);
                });
            });

            // Hàm xóa danh mục khỏi danh sách
            function removeCategory(li, categoryId) {
                selectedCategoriesList.removeChild(li);
                selectedCategories.splice(selectedCategories.indexOf(categoryId), 1);
                if (selectedCategories.length === 0) {
                    categoryError.style.display = 'block';
                }
            }

            // Ẩn gợi ý khi nhấp ra ngoài
            document.addEventListener('click', (e) => {
                if (!categorySuggestions.contains(e.target) && e.target !== categoryInput) {
                    categorySuggestions.style.display = 'none';
                }
            });
        });
    </script>

</body>

</html>
