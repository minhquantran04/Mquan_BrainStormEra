@model List<BrainStormEra.Models.Account>
@using Microsoft.AspNetCore.Http

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Update Learner Points</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/HomePage/landing_page.css">
    <link rel="stylesheet" href="~/css/base.css">
    <link rel="stylesheet" href="~/css/Admin/PointPayment.css">
    <link rel="icon" href="~/lib/img/BrainStormEra_logo.png" type="image/x-icon">
</head>

<body>
    @await Html.PartialAsync("~/Views/Shared/Admin/Header/_Header.cshtml")

    <main class="container mt-5">
        <div class="total-points-container">
            <span class="total-points-label">Total Points: </span>
            <span class="total-points-value">@ViewBag.TotalPoints.ToString("N0") đ</span>
        </div>
        <h2 class="text-center header-title">
            Update Learner Points
        </h2>
        <div class="input-group mb-3">
            <input type="text" id="searchInput" class="form-control" placeholder="Search by ID or Name"
                value="@Context.Request.Query["search"]">
            <button class="btn btn-primary search-btn" onclick="searchLearners()">
                <i class="fas fa-search"></i>
            </button>
        </div>

        <div class="table-container">
            <table class="table table-bordered" id="learnersTable">
                <thead>
                    <tr>
                        <th>User ID</th>
                        <th>Full Name</th>
                        <th>Payment Points</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null && Model.Any())

                    {

                        foreach (var learner in Model)

                        {
                            <tr id="learner-row-@learner.UserId">
                                <td data-label="User ID" class="table-cl">@learner.UserId</td>
                                <td data-label="Full Name" class="table-cl">
                                    @(string.IsNullOrEmpty(learner.FullName) ? "Unnamed" : learner.FullName)
                                </td>
                                <td data-label="Payment Points" class="text-center table-cl">
                                    @learner.PaymentPoint.GetValueOrDefault().ToString("N0")
                                    <button class="btn btn-link toggle-btn" onclick="toggleDetails('@learner.UserId')">
                                        <i id="toggle-icon-@learner.UserId" class="fas fa-chevron-down text-primary"></i>
                                    </button>
                                </td>
                            </tr>
                            <tr id="details-row-@learner.UserId" class="details-row-hidden">
                                <td colspan="3">
                                    <div class="update-points-section text-center">
                                        <h4>Update Points for @(string.IsNullOrEmpty(learner.FullName) ? "Unnamed" :
                                    learner.FullName)</h4>
                                        <form id="updateForm-@learner.UserId" class="d-inline-block"
                                            onsubmit="event.preventDefault(); updatePoints('@learner.UserId');">
                                            <div class="mb-3">
                                                <label for="pointsInput-@learner.UserId" class="form-label">Payment
                                                    Points</label>
                                                <div class="input-group input-group-centered">
                                                    <span class="input-group-text"><i class="fas fa-coins"></i></span>
                                                    <input type="text" id="pointsInput-@learner.UserId"
                                                        class="form-control text-center points-input" placeholder="Input points"
                                                        inputmode="numeric">
                                                </div>
                                            </div>
                                            <button type="submit" class="btn btn-primary">Update Points</button>
                                        </form>
                                    </div>
                                </td>
                            </tr>
                        }

                    }

                    else

                    {
                        <tr>
                            <td colspan="3" class="text-center text-muted">No learners found matching your search criteria.
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <!-- Pagination Controls -->
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center">
                @if (ViewBag.CurrentPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link"
                            href="@Url.Action("UpdateManagement", new { search = Context.Request.Query["search"], pageIndex = ViewBag.CurrentPage - 1 })"
                            aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                }

                @for (int i = 1; i <= ViewBag.TotalPages; i++)
                {
                    <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                        <a class="page-link"
                            href="@Url.Action("UpdateManagement", new { search = Context.Request.Query["search"], pageIndex = i })">@i</a>
                    </li>
                }

                @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                {
                    <li class="page-item">
                        <a class="page-link"
                            href="@Url.Action("UpdateManagement", new { search = Context.Request.Query["search"], pageIndex = ViewBag.CurrentPage + 1 })"
                            aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                }
            </ul>
        </nav>
    </main>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"
        crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            $('.details-row-hidden').hide(); // Ensures all details rows are hidden on page load
        });

        function searchLearners() {
            const searchQuery = document.getElementById('searchInput').value;
            window.location.href = `/Points/UpdateManagement?search=${encodeURIComponent(searchQuery)}`;
        }

        function toggleDetails(userId) {
            const detailsRow = document.getElementById(`details-row-${userId}`);
            const toggleIcon = document.getElementById(`toggle-icon-${userId}`);
            if (detailsRow.style.display === "none" || detailsRow.style.display === "") {
                detailsRow.style.display = "table-row";
                toggleIcon.classList.remove("fa-chevron-down");
                toggleIcon.classList.add("fa-chevron-up");
            } else {
                detailsRow.style.display = "none";
                toggleIcon.classList.remove("fa-chevron-up");
                toggleIcon.classList.add("fa-chevron-down");
            }
        }

        function updatePoints(userId) {
            const pointsInput = document.getElementById(`pointsInput-${userId}`);
            const formattedPoints = pointsInput.value.replace(/,/g, '').replace(/\./g, ''); // Remove commas and dots for numerical conversion
            const newPoints = parseFloat(formattedPoints);

            if (isNaN(newPoints) || newPoints < 1000 || newPoints > 20000000) {
                alert('Please input point between 1000 and 20.000.000');
                return;
            }

            $.ajax({
                url: '/Points/UpdatePaymentPoints',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ UserId: userId, NewPoints: newPoints.toFixed(2) }),
                success: function (response) {
                    if (response.success) {
                        alert(response.message);
                        location.reload();
                    } else {
                        alert(response.message);
                    }
                },
                error: function () {
                    alert('Error updating points.');
                }
            });
        }

        // Format points input with commas for thousands separator
        document.addEventListener('input', function (event) {
            if (event.target.classList.contains('points-input')) {
                let value = event.target.value.replace(/\D/g, ''); // Remove non-numeric characters
                event.target.value = new Intl.NumberFormat().format(value);
            }
        });

    </script>
</body>

</html>
