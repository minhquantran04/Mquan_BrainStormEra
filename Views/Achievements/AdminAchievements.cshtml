@model BrainStormEra.Views.Achievement.LearnerAchievementsModel
@{
    var achievements = ViewData["Achievements"] as IEnumerable<dynamic>;
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/HomePage/landing_page.css">
    <link rel="stylesheet" href="~/css/base.css">
    <link rel="stylesheet" href="~/css/Achievement/AdminAchievement.css">
    <link rel="icon" href="~/lib/img/BrainStormEra_logo.png" type="image/x-icon">
    <title>All User Achievements</title>
</head>

<body>
    @await Html.PartialAsync("~/Views/Shared/Admin/Header/_Header.cshtml")

    <main class="container-fluid my-5">
        <h2 class="achievement-title text-center">All Achievements</h2>
        <div class="table-responsive">
            <table class="table table-bordered achievement-table">
                <thead>
                    <tr>
                        <th>Achievement ID</th>
                        <th>Achievement Name</th>
                        <th>Condition</th>
                        <th>Icon</th>
                        <th>Date Created</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (achievements != null && achievements.Any())
                    {
                        foreach (var achievement in achievements)
                        {
                            <tr id="achievement-row-@achievement.AchievementId">
                                <td>@achievement.AchievementId</td>
                                <td>@achievement.AchievementName</td>
                                <td>@achievement.AchievementDescription courses</td>
                                <td>
                                    <img src="@achievement.AchievementIcon" alt="@achievement.AchievementName">
                                </td>
                                <td>@achievement.AchievementCreatedAt.ToString("yyyy-MM-dd")</td>
                                <td>
                                    <button class="icon-btn btn-edit" data-bs-toggle="modal" data-bs-target="#achievementModal"
                                        data-id="@achievement.AchievementId">
                                        <i class="fas fa-pencil-alt"></i>
                                    </button>
                                    <button class="icon-btn btn-delete" data-id="@achievement.AchievementId">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="6">No achievements found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <button class="btn btn-success btn-add" data-bs-toggle="modal" data-bs-target="#achievementModal">
            <i class="fas fa-plus"></i> Add Achievement
        </button>
    </main>

    <!-- Modal for Adding/Editing Achievement -->
    <div class="modal fade" id="achievementModal" tabindex="-1" aria-labelledby="achievementModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <form id="achievementForm" method="post" enctype="multipart/form-data"
                    action="@Url.Action("AddAchievement", "Achievement")">
                    <div class="modal-header">
                        <h5 class="modal-title" id="achievementModalLabel">Add/Edit Achievement</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <input type="hidden" id="achievementId" name="achievementId">
                        <div class="mb-3">
                            <label for="achievementName" class="form-label">Achievement Name</label>
                            <input type="text" class="form-control" id="achievementName" name="achievementName"
                                required>
                        </div>
                        <div class="mb-3">
                            <label for="achievementCondition" class="form-label">Condition</label>
                            <input type="text" class="form-control" id="achievementCondition"
                                name="achievementDescription" placeholder="Completed courses" required>
                        </div>
                        <div class="mb-3">
                            <label for="achievementIcon" class="form-label">Icon</label>
                            <input type="file" class="form-control" id="achievementIcon" name="achievementIcon"
                                accept="image/*">
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-success">Save</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    @await Html.PartialAsync("~/Views/Shared/Footer/_Footer.cshtml")

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            let maxCondition = 0;
            let allConditions = [];
            let allAchievementNames = [];

            // Fetch the list of all conditions and achievement names from the server
            $.get('@Url.Action("GetAllConditionsAndNames", "Achievement")', function (response) {
                if (response.success) {
                    allConditions = response.conditions;
                    allAchievementNames = response.names.map(name => name.toLowerCase()); // Convert to lowercase for case-insensitive comparison
                    maxCondition = Math.max(...allConditions);
                }
            });

            // Edit Achievement button click handler
            $(document).on('click', '.btn-edit', function () {
                const achievementId = $(this).data('id');
                $.get('@Url.Action("GetAchievement", "Achievement")', { achievementId: achievementId }, function (response) {
                    if (response.success) {
                        // Populate modal with the fetched data
                        $('#achievementId').val(response.data.achievementId);
                        $('#achievementName').val(response.data.achievementName);
                        $('#achievementName').data('original-name', response.data.achievementName.toLowerCase()); // Store original name

                        // Display condition with 'courses' and make it read-only
                        $('#achievementCondition').val(response.data.achievementDescription + ' courses');
                        $('#achievementCondition').prop('readonly', true);
                        $('#achievementForm').attr('action', '@Url.Action("EditAchievement", "Achievement")');

                        $('#achievementModal').modal('show');
                    } else {
                        alert(response.message);
                    }
                });
            });

            // Add Achievement button click handler
            $('.btn-add').on('click', function () {
                // Clear the form for a new entry
                $('#achievementId').val('');
                $('#achievementName').val('');
                $('#achievementName').removeData('original-name'); // Clear original name data for new achievement
                $('#achievementCondition').val('');
                $('#achievementCondition').prop('readonly', false);
                $('#achievementIcon').val('');
                $('#achievementForm').attr('action', '@Url.Action("AddAchievement", "Achievement")');

                $('#achievementModal').modal('show');
            });

            // Automatically append 'courses' to the condition input and validate
            $('#achievementCondition').on('input', function () {
                const input = $(this).val().replace(' courses', '');
                if (/^\d+$/.test(input)) {
                    const conditionValue = parseInt(input);

                    if (allConditions.includes(conditionValue)) {
                        alert(`Condition ${conditionValue} courses already exists. Please enter a unique value.`);
                        $(this).val('');
                    } else if (conditionValue <= maxCondition) {
                        alert(`Condition must be greater than ${maxCondition} courses.`);
                        $(this).val('');
                    } else {
                        $(this).val(input + ' courses');
                    }
                } else {
                    $(this).val('');
                }
            });

            // Form submission handler for Add/Edit Achievement
            $('#achievementForm').on('submit', function (e) {
                e.preventDefault();

                const achievementName = $('#achievementName').val().trim().toLowerCase();
                const originalName = $('#achievementName').data('original-name'); // Get original name for edit
                const conditionValue = parseInt($('#achievementCondition').val().replace(' courses', ''));

                // Validate the achievement name for uniqueness
                if (allAchievementNames.includes(achievementName) && achievementName !== originalName) {
                    alert(`Achievement name "${$('#achievementName').val()}" already exists. Please enter a unique name.`);
                    return;
                }

                // Validate the condition for uniqueness and max condition (only during Add)
                if ($('#achievementForm').attr('action').endsWith("AddAchievement")) {
                    if (allConditions.includes(conditionValue) || conditionValue <= maxCondition) {
                        alert(`Condition must be unique and greater than ${maxCondition} courses.`);
                        return;
                    }
                }

                const formData = new FormData(this);
                const actionUrl = $(this).attr('action');

                // Update the achievement description field in formData to store only the number
                formData.set('achievementDescription', conditionValue);

                $.ajax({
                    url: actionUrl,
                    type: 'POST',
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        if (response.success) {
                            $('#achievementModal').modal('hide');
                            location.reload();
                        } else {
                            alert(response.message || 'An error occurred.');
                        }
                    }
                });
            });

            // Delete Achievement button click handler
            $(document).on('click', '.btn-delete', function () {
                const achievementId = $(this).data('id');
                if (confirm('Are you sure you want to delete this achievement?')) {
                    $.post('@Url.Action("DeleteAchievement", "Achievement")', { achievementId: achievementId }, function (response) {
                        if (response.success) {
                            $('#achievement-row-' + achievementId).remove();
                            alert('Achievement deleted successfully');
                        } else {
                            alert(response.message);
                        }
                    });
                }
            });
        });
    </script>
</body>

</html>
